#! /usr/bin/env perl
use warnings;
use strict;

use Getopt::Long qw(:config bundling no_ignore_case no_auto_abbrev require_order);
use QBitcoin::Const;
use QBitcoin::Log;
use QBitcoin::Config qw($config read_config);
use QBitcoin::Network;
use Bitcoin::Protocol;

sub main {
    my ( $help, @peer_hosts, @btc_hosts, $conffile );

    my %opts;
    unless (GetOptions(
        'help|h|?'      => \$help,
        'peer|p=s'      => \@peer_hosts,
        'btcnode|B=s'   => \@btc_hosts,
        'verbose|v'     => \$opts{verbose},
        'bind|b=s'      => \$opts{bind},
        'port|P=s'      => \$opts{port},
        'rpc|J=s'       => \$opts{rpc},
        'rpc-port=s'    => \$opts{rpc_port},
        'genesis|G'     => \$opts{genesis},
        'generate|g'    => \$opts{generate},
        'fake-coinbase' => \$opts{fake_coinbase},
        'produce'       => \$opts{produce},
        'database=s'    => \$opts{database},
        'dbi=s'         => \$opts{dbi},
        'log=s'         => \$opts{log},
        'config|f=s'    => \$conffile,
    )) {
        select STDERR;
        usage();
        return 1;
    }
    if ($help) {
        usage();
        return 0;
    }

    read_config($conffile);

    # command-line options override config values
    $config->set($_ => $opts{$_}) foreach grep { defined $opts{$_} } keys %opts;
    $config->set(peer    => @peer_hosts) if @peer_hosts;
    $config->set(btcnode => @btc_hosts)  if @btc_hosts;

    return QBitcoin::Network->main_loop();
}

sub usage {
    print "QBitcoin Core Daemon version " . VERSION . "\n";
    print "Usage:  qbitcoind [options]\n";
    print "Options:\n";
    print "   -h, -? --help               - print this help message and exit,\n";
    print "   -v, --verbose               - output logs to stdout,\n";
    print "   -f, --config <file>         - config file, 'key = value' format (default " . CONFIG_DIR . "/" . CONFIG_NAME . "),\n";
    print "   -p, --peer <host[:port]>    - connect to peer <host> and <port> (default port " . PORT . "),\n";
    if (UPGRADE_POW) {
        print "   -B, --btcnode <host[:port]> - connect to btc node <host>:<port> (default port " . Bitcoin::Protocol->PORT . "),\n";
    }
    print "   -b, --bind <addr[:port]>    - bind to local <address> and <port> (default " . BIND_ADDR . ":" . PORT . "),\n";
    print "   -J, --rpc <addr[:port]>     - respond to JSON RPC API on <address> and <port> (default " . RPC_ADDR . ":" . RPC_PORT . "),\n";
    print "   -g, --generate              - generate blocks (private key must be stored in the database),\n";
    print "   -G, --genesis               - run as genesis node, do not need to synchronize with other nodes for authoritative answers,\n";
    print "   --log <file>                - write log to <file>, 'syslog' for syslog (default).\n";
}

exit main();
