#! /usr/bin/env perl
use warnings;
use strict;

use Getopt::Long qw(:config bundling no_ignore_case no_auto_abbrev require_order);
use POSIX;
use QBitcoin::Const;
use QBitcoin::Log;
use QBitcoin::WarnWrapper;
use QBitcoin::Config qw($config read_config);
use QBitcoin::ORM;
use QBitcoin::Transaction;
use QBitcoin::Block;
use QBitcoin::Network;
use Bitcoin::Protocol;

sub main {
    my ( $help, @peer_hosts, @fallback_peers, @btc_hosts, $conffile );

    # Prettify ps title (remove "perl" from the command line)
    $0 = join(" ", $0 =~ s|.*/||r, @ARGV);

    my %opts;
    unless (GetOptions(
        'help|h|?'        => \$help,
        'peer|p=s'        => \@peer_hosts,
        'fallback-peer=s' => \@fallback_peers,
        'btcnode|B=s'     => \@btc_hosts,
        'verbose|v'       => \$opts{verbose},
        'debug|d'         => \$opts{debug},
        'bind|b=s'        => \$opts{bind},
        'daemonize|D'     => \$opts{daemonize},
        'port|P=s'        => \$opts{port},
        'rpc|J=s'         => \$opts{rpc},
        'rpc-port=s'      => \$opts{rpc_port},
        'rest|R=s'        => \$opts{rest},
        'rest-port=s'     => \$opts{rest_port},
        'genesis|G'       => \$opts{genesis},
        'generate|g'      => \$opts{generate},
        'fake-coinbase'   => \$opts{fake_coinbase},
        'produce'         => \$opts{produce},
        'database=s'      => \$opts{database},
        'testnet|t'       => \$opts{testnet},
        'dbi=s'           => \$opts{dbi},
        'log=s'           => \$opts{log},
        'loglevel=s'      => \$opts{loglevel},
        'revalidate'      => \$opts{revalidate},
        'config|f=s'      => \$conffile,
    )) {
        select STDERR;
        usage();
        return 1;
    }
    if ($help) {
        usage();
        return 0;
    }

    read_config($conffile);

    # command-line options override config values
    $config->set($_ => $opts{$_}) foreach grep { defined $opts{$_} } keys %opts;
    $config->set(peer    => @peer_hosts) if @peer_hosts;
    $config->set(btcnode => @btc_hosts)  if @btc_hosts;
    $config->set(btc_testnet => 1) if $opts{testnet} && !defined $config->{btc_testnet};
    $config->set(fallback_peer => @fallback_peers) if @fallback_peers;

    if ($config->{daemonize}) {
        if ($opts{verbose}) {
            print STDERR "Options -D (daemonize) and -v (verbose) are mutually exclusive\n";
            return 1;
        }
        if ($opts{debug} && $config->{loglevel}) {
            print STDERR "Options -D (daemonize) and -d (debug) are mutually exclusive\n";
            return 1;
        }
        $config->set(verbose => 0);
        daemonize();
    }

    QBitcoin::Log->init();

    if ($opts{revalidate}) {
        revalidate();
    }

    return QBitcoin::Network->main_loop();
}

sub daemonize {
    POSIX::setsid()
        or die "setsid: $!";
    my $pid = fork() // die $!;
    exit(0) if $pid;
    chdir "/";
    # umask 0;
    foreach my $fd (0 .. (POSIX::sysconf(&POSIX::_SC_OPEN_MAX) || 1024)) {
        POSIX::close $fd;
    }
    open(STDIN,  "<",  "/dev/null");
    open(STDOUT, ">",  "/dev/null");
    open(STDERR, ">&", \*STDOUT);
}

sub usage {
    print "QBitcoin Core Daemon version " . VERSION . "\n";
    print "Usage:  qbitcoind [options]\n";
    print "Options:\n";
    print "   -h, -? --help               - print this help message and exit,\n";
    print "   -v, --verbose               - output logs to stdout,\n";
    print "   -d, --debug                 - output debug info,\n";
    print "   -f, --config <file>         - config file, 'key = value' format (default " . CONFIG_DIR . "/" . CONFIG_NAME . "),\n";
    print "   -p, --peer <host[:port]>    - connect to peer <host> and <port> (default port " . PORT . "),\n";
    if (UPGRADE_POW) {
        print "   -B, --btcnode <host[:port]> - connect to btc node <host>:<port> (default port " . BTC_PORT . "),\n";
    }
    print "   -b, --bind <addr[:port]>    - bind to local <address> and <port> (default " . BIND_ADDR . ":" . PORT . "),\n";
    print "   -J, --rpc <addr[:port]>     - respond to JSON RPC API on <address> and <port> (default " . RPC_ADDR . ":" . RPC_PORT . "),\n";
    print "   -R, --rest <addr[:port]>    - respond to Esplora RESTful API on <address> and <port> (disabled by default, default port " . REST_PORT . "),\n";
    print "   -D, --daemonize             - daemonize,\n";
    print "   -g, --generate              - generate blocks (enabled by default if there are any coins on balance),\n";
    print "   -G, --genesis               - run as genesis node, do not need to synchronize with other nodes for authoritative answers,\n";
    print "   -t, --testnet               - run for testnet, by default mainnet,\n";
    print "   --log <file>                - write log to <file>, 'syslog' for syslog (default),\n";
    print "   --loglevel <prio>           - set log level: 'debug', 'info' (default), 'notice', 'warning', 'err', 'crit'.\n";
}

sub revalidate {
    # TODO: rescan btc blocks
    Info("Revalidating stored blocks");
    my $tx_class = "QBitcoin::Transaction";
    my $portion = 100;
    my $bad_height;
    my $prev_block;
    for (my $start_block = 0;; $start_block += $portion) {
        my @blocks = QBitcoin::Block->find( height => { '>=', $start_block }, -limit => $portion, -sortby => 'height' )
            or last;
        foreach my $block (@blocks) {
            if ($prev_block) {
                if ($block->prev_hash ne $prev_block->hash || $block->height != $prev_block->height + 1) {
                    $bad_height = $block->height;
                    last;
                }
                $block->prev_block($prev_block);
            }
            else {
                if ($block->height != 0) {
                    $bad_height = $block->height;
                    last;
                }
            }
            my $upgraded = $block->upgraded;
            my $reward_fund = $block->reward_fund;
            my @txs;
            foreach my $txhash (QBitcoin::ORM::fetch($tx_class, block_height => $block->height, -sortby => 'block_pos ASC')) {
                $tx_class->pre_load($txhash);
                my $tx = $tx_class->new($txhash);
                my $hash = $tx->hash;
                $tx->calculate_hash;
                if ($hash ne $tx->hash) {
                    Warningf("Invalid hash for loaded transaction %s != %s", unpack("H*", $hash), $tx->hash_str);
                    $bad_height = $block->height;
                    last;
                }
                push @txs, $tx;
                $tx->add_to_block($block);
            }
            $block->transactions(\@txs);
            if ( defined($bad_height) ||
                 $block->hash ne $block->calculate_hash ||
                 $block->validate() ||
                 $block->validate_chain() ||
                 $block->upgraded != $upgraded ||
                 $block->reward_fund != $reward_fund) {
                $bad_height = $block->height;
            }
            $prev_block = $block;
            last if defined($bad_height);
        }
        last if defined($bad_height);
        last if @blocks < $portion;
    }
    undef $prev_block;
    if (!defined($bad_height)) {
        Infof("All stored blocks are valid");
        return;
    }
    Noticef("Blocks starting from height %d are invalid", $bad_height);
    # Remove all blocks starting from the bad block
    # And move all transactions from the removed blocks to the mempool
    foreach my $tx_hashref (QBitcoin::ORM::fetch( $tx_class, block_height => { '>=', $bad_height }, -sortby => 'block_height DESC, block_pos DESC' )) {
        next if $tx_hashref->{tx_type} == TX_TYPE_STAKE;
        $tx_class->pre_load($tx_hashref);
        my $tx = $tx_class->new($tx_hashref);
        if ($tx->validate_hash or $tx->validate) {
            foreach my $in (@{$tx->in}) {
                $in->{txo}->spent_del($tx);
            }
            next;
        }
        $tx->add_to_cache;
        $tx->unconfirm;
    }
    my $last_block = QBitcoin::Block->find(-sortby => "height DESC", -limit => 1);
    for (my $height = $last_block->height; $height >= $bad_height; $height--) {
        QBitcoin::Block->new(height => $height)->delete;
    }
}

exit main();
